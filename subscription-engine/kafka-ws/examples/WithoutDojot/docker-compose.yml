version: '3'
services:

  redis:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    ports:
      - 6379:6379 #For tests running externally
    volumes:
      - redis-volume:/data
    # TODO: add tls example
    #   - ./redis.conf:/usr/local/etc/redis/redis.conf
    logging:
      driver: json-file
      options:
        max-size: 100m

  redis-commander:
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"

  zookeeper:
    image: dojot/zookeeper:3.4
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka:
    image: dojot/wurstmeister-kafka:2.12-2.1.1
    depends_on:
      - zookeeper
    restart: always
    ports:
      - 9092:9092 #For tests running externally
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_TOPICS: 'tenant1.ws.example.test,tenant2.ws.example.test'
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafkacat-producer:
    image: dojot/confluentinc-cp-kafkacat:5.0.4-1
    depends_on:
      - kafka
    restart: always
    command: /bin/bash -c "/kafkacat-producer.sh"
    volumes:
      - ./kafkacat-producer.sh:/kafkacat-producer.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 100m

  kafka-ws:
    build:
      context: ./../../
      dockerfile: ./Dockerfile
    environment:
      # NODE_ENV: development # To detail error messages and ignores if the service is ready to receive requests
      KAFKA_WS_CONSUMER_METADATA_BROKER_LIST: kafka:9092
      KAFKA_WS_CONSUMER_GROUP_ID: kafka-ws
      KAFKA_WS_LOG_CONSOLE_LEVEL: debug
      KAFKA_WS_LOG_VERBOSE: "true"
      KAFKA_WS_LOG_FILE_ENABLE: "true"
      KAFKA_WS_LOG_FILE_LEVEL: debug
      KAFKA_WS_SERVER_PORT: 5000
      KAFKA_WS_SERVER_HOST: 0.0.0.0
      KAFKA_WS_SERVER_JWT_EXP_TIME: "true"
      KAFKA_WS_SERVER_CONNECTION_MAX_LIFE_TIME: 120
      KAFKA_WS_REDIS_HOST: "redis"
      # tls example
      # KAFKA_WS_SERVER_TLS: "true"
      # KAFKA_WS_SERVER_TLS_CA_FILE: /certs/ca-cert.pem
      # KAFKA_WS_SERVER_TLS_KEY_FILE: /certs/server-key.pem
      # KAFKA_WS_SERVER_TLS_CERT_FILE: /certs/server-cert.pem
    restart: always
    ports:
      - 5000:5000 #For tests running externally
    logging:
      driver: json-file
      options:
        max-size: 100m
    # tls example
    # volumes:
    #  - ./certs/server/:/certs/:Z
    # to dev
    # volumes:
    # # need to run before 'npm run parser:compile' and # remove temporarily the `--only=prod` flag in npm install on the Dockerfile to use nodemon (npm run dev)
    #  - ../../app/:/opt/kafka-ws/app/:Z
    # command: ["npm", "run", "dev"]

  ws-client-sample-0:
    build:
      context: ./WSClient/
      dockerfile: ./Dockerfile
    environment:
      WS_HOST: "kafka-ws"
      WS_PORT: 5000
      # tls example
      # WS_TLS: "true"
      # WS_TLS_CA_FILE: /certs/ca-cert.pem
      # WS_TLS_KEY_FILE: /certs/client-key.pem
      # WS_TLS_CERT_FILE: /certs/client-cert.pem
    depends_on:
      - kafka-ws
    restart: always
    command: ["node", "Client.js","0"]
    logging:
      driver: json-file
      options:
        max-size: 100m
    # tls example
    # volumes:
    #   - ./certs/client/:/certs/:Z

  ws-client-sample-1:
    build:
      context: ./WSClient/
      dockerfile: ./Dockerfile
    environment:
      WS_HOST: "kafka-ws"
      WS_PORT: 5000
      # tls example
      # WS_TLS: "true"
      # WS_TLS_CA_FILE: /certs/ca-cert.pem
      # WS_TLS_KEY_FILE: /certs/client-key.pem
      # WS_TLS_CERT_FILE: /certs/client-cert.pem
    depends_on:
      - kafka-ws
    restart: always
    command: ["node", "Client.js","1"]
    logging:
      driver: json-file
      options:
        max-size: 100m
    # tls example
    # volumes:
    #   - ./certs/client/:/certs/:Z

volumes:
  redis-volume: