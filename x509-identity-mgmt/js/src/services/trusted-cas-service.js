const { getFingerprint } = require('../core/pki-utils');

const pkiUtils = require('../core/pki-utils');

/**
 * Service to handle Trusted CAs
 */
class TrustedCAsService {
  /**
   * The dependencies are injected through the constructor
   */
  constructor({
    ejbcaFacade, tenant, rootCA, externalCaCertMinimumValidityDays,
  }) {
    this.ejbcaFacade = ejbcaFacade;
    this.tenant = tenant;
    this.rootCA = rootCA;
    this.externalCaCertMinimumValidityDays = externalCaCertMinimumValidityDays;
  }

  /**
   * Obtains the Root certificate used to sign all certificates generated by this component.
   *
   * @returns the root CA certificate.
   */
  async getRootCertificate() {
    const caPem = await this.ejbcaFacade.getRootCertificate(this.rootCA);

    const certificateFingerprint = getFingerprint(caPem);

    return { certificateFingerprint, caPem };
  }

  /**
   * Get the latest valid certificate revocation list.
   *
   * @param {boolean} renew Flag indicating whether a new CRL should
   *                        be generated in the EJBCA request
   *
   * @returns the latest valid CRL.
   */
  async getRootCRL(renew = false) {
    const crl = await this.ejbcaFacade.getCRL(this.rootCA, renew);
    return { crl };
  }

  /**
   * Register an external root CA certificate (not generated by this service)
   *
   * @param {object} Object with the root CA certificate.
   *
   * @returns the fingerprint of the registered certificate
   */
  async registerCertificate({ caPem, allowAutoRegistration }) {
    const caCert = pkiUtils.parseCert(caPem);

    pkiUtils.checkRemainingDays(caCert, this.externalCaCertMinimumValidityDays);

    await pkiUtils.assertRootCA(caCert);

    pkiUtils.checkRootExternalCN(caCert, this.rootCA);

    // The number of registered CAs has been exceeded.
    // The certificate already exists.
    // Note: Itâ€™s possible to register up to XX CA certificates per tenant.

    return { caCertificateFingerprint: pkiUtils.getFingerprint(caPem) };
  }
}

module.exports = TrustedCAsService;
