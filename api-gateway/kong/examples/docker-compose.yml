version: "3.8"

services:

  # Prepare database, Bootstrap the database
  kong-migrations:
    build:
      context: ../
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  # Run any new migrations and Finish running any pending migrations after 'up'.
  kong-migrations-up:
    build:
      context: ../
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  apigw:
    build:
      context: ../
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: debug
      # DOJOT_PLUGIN_CLIENT_ID: "kong"
      # To enable HTTPs external, it is necessary to configure public certificates
      # issued by a public CA, such as lets encrypt in KONG_SSL_CERT.
      # KONG_SSL_CERT_KEY: /certs/example-external.key
      # KONG_SSL_CERT: /certs/example-external.crt
      # To enable HTTPs internal with mutual authentication, it is necessary to configure public certificates
      # issued by a EJBCA internal from dojot in KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE.
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE_KEY: /certs/example-internal.key
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE: /certs/example-internal.crt
      # Root cerficate from internal CA
      # KONG_NGINX_PROXY_PROXY_SSL_TRUSTED_CERTIFICATE: /certs/root-ca-internal.crt
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY: "on"
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY_DEPTH: "2"
    ports:
      - "8000:8000/tcp"
      # Proxy listen to HTTPS traffic (8443). services and routes must be configured to use the https protocol
      # Each service must have its certificate with Subject Alternative Name generated by dojot's EJBCA.
      #- "8443:8443/tcp"
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kong-config:
    image: appropriate/curl:3.1
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  konga:
    image: pantsel/konga:0.14.7
    depends_on:
      - apigw
      - mongodb
    ports:
      - 1337:1337
    environment:
      DB_ADAPTER: mongo
      DB_DATABASE: konga
      DB_HOST: mongodb
      KONGA_LOG_LEVEL: info
      NO_AUTH: "true"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /konga.js
      NODE_ENV: production
      BASE_URL: localhost
    volumes:
      - ./kong/konga.config.js:/konga.js:ro
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  keycloak:
    image: jboss/keycloak:12.0.4
    depends_on:
      - postgres
    restart: always
    volumes:
      - ./keycloak/admin_realm.json:/tmp/example-realm.json:Z
    environment:
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.impersonation=disabled -Dkeycloak.profile.feature.upload_scripts=enabled"
      KEYCLOAK_USER: admin  #KEYCLOAK_USER_FILE
      KEYCLOAK_PASSWORD: admin #KEYCLOAK_PASSWORD_FILE
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_PORT: 5432
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_LOGLEVEL: INFO
      ROOT_LOGLEVEL: INFO
      KEYCLOAK_IMPORT: /tmp/example-realm.json
      KEYCLOAK_FRONTEND_URL: http://localhost:8000/auth
      PROXY_ADDRESS_FORWARDING: "true" # When running Keycloak behind a proxy, you will need to enable proxy address forwarding
      # KEYCLOAK_STATISTICS: all
      # DEBUG: "true"
      # DEBUG_PORT: "*:8787"
    ports:
      - "8080:8080"
      #- "8443:8443"
      #- "8787:8787"
    healthcheck:
      test: "curl -f http://localhost:8080/auth || exit 1"
      start_period: 20s
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  postgres:
    image: postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  mongodb:
    image: mongo:3.2
    restart: always
    user: "mongodb"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  server-api-example:
    build:
      context: ./
      dockerfile: ./server-api-example/Dockerfile
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

