version: '3.8'
services:

  server:
    build:
      context: ./../
      dockerfile: ./example/server/Dockerfile
    restart: always
    depends_on:
      - x509-identity-mgmt
      - server-cert-sidecar
    volumes:
      - server-cert-side-volume:/certs
    logging:
      driver: json-file
      options:
        max-size: 100m

  server-cert-sidecar:
    build:
      context: ./../
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      - x509-identity-mgmt
    environment:
      CERT_SC_USER_CONFIG_FILE: simple.conf
      HOSTNAME: server
      CERT_SC_APP_SIDECAR_TO: 'server'
      CERT_SC_LOG_CONSOLE_LEVEL: 'debug'
      CERT_SC_CERTS_HOSTNAMES: '["server"]'
      # CERT_SC_CRON_CRL: 'true'
      # CERT_SC_CRON_CRL_TIME: '0 */1 * * * *'
      # CERT_SC_CERTS_CRL: 'true'
    volumes:
      - server-cert-side-volume:/certs
    #   - ../app/:/opt/cert-sidecar/app/:Z
    # command: ["npm", "run", "dev"]
    logging:
      driver: json-file
      options:
        max-size: 100m

  client:
    build:
      context: ./../
      dockerfile: ./example/client/Dockerfile
    restart: always
    depends_on:
      - x509-identity-mgmt
      - client-cert-sidecar
      - server
    volumes:
      - client-cert-side-volume:/certs
    logging:
      driver: json-file
      options:
        max-size: 100m

  client-cert-sidecar:
    build:
      context: ./../
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      - x509-identity-mgmt
    environment:
      CERT_SC_USER_CONFIG_FILE: simple.conf
      HOSTNAME: 'client'
      CERT_SC_APP_SIDECAR_TO: 'client'
      CERT_SC_LOG_CONSOLE_LEVEL: 'debug'
      # CERT_SC_CRON_CRL: 'true'
      # CERT_SC_CRON_CRL_TIME: '0 */1 * * * *'
      # CERT_SC_CERTS_CRL: 'true'
    volumes:
      - client-cert-side-volume:/certs
    #   - ../app/:/opt/cert-sidecar/app/:Z
    # command: ["npm", "run", "dev"]
    logging:
      driver: json-file
      options:
        max-size: 100m

  postgres:
    image: dojot/postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 100m

  mongodb:
      image: dojot/mongo:3.2
      restart: always
      user: "mongodb"
      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
        interval: 10s
        timeout: 10s
        retries: 5
        start_period: 40s
      logging:
        driver: json-file
        options:
          max-size: 100m

  x509-identity-mgmt:
    image: dojot/x509-identity-mgmt:v0.5.1-rc.2
    ports:
      - 3000:3000
    depends_on:
      - postgres
      - mongodb
    restart: always
    hostname: "x509-identity-mgmt"
    domainname: "dojot.iot"
    environment:
      DATABASE_JDBC_URL: jdbc:postgresql://postgres:5432/postgres?characterEncoding=UTF-8
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      EJBCA_PERFORM_DOJOT_SETUP: "true"
      NODE_ENV: production
      MONGO_URI: "mongodb://mongodb:27017/x509-identity-mgmt"
    logging:
      driver: json-file
      options:
        max-size: 100m

volumes:
  server-cert-side-volume:
  client-cert-side-volume: